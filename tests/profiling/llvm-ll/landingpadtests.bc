	.file	"landingpadtests.ll"
	.text
	.globl	_Z11landingpad1v
	.align	16, 0x90
	.type	_Z11landingpad1v,@function
_Z11landingpad1v:                       # @_Z11landingpad1v
	.cfi_startproc
	.cfi_personality 3, __gxx_personality_v0
.Leh_func_begin0:
	.cfi_lsda 3, .Lexception0
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp11:
	.cfi_def_cfa_offset 16
.Ltmp12:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp13:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	-8(%rbp), %rax
	movl	4(%rax), %esi
.Ltmp0:
	movl	$.L.str, %ecx
	movl	%ecx, %edi
	xorl	%ecx, %ecx
	movb	%cl, %dl
	movb	%dl, %al
	callq	printf
.Ltmp1:
	movl	%eax, -24(%rbp)         # 4-byte Spill
	jmp	.LBB0_1
.LBB0_1:                                # %invoke.cont
	jmp	.LBB0_5
.LBB0_2:                                # %lpad
.Ltmp2:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
# BB#3:                                 # %catch
	movq	-16(%rbp), %rdi
	callq	__cxa_begin_catch
.Ltmp3:
	movl	$.L.str1, %ecx
	movl	%ecx, %edi
	xorl	%ecx, %ecx
	movb	%cl, %dl
	movq	%rax, -32(%rbp)         # 8-byte Spill
	movb	%dl, %al
	callq	printf
.Ltmp4:
	movl	%eax, -36(%rbp)         # 4-byte Spill
	jmp	.LBB0_4
.LBB0_4:                                # %invoke.cont2
	callq	__cxa_end_catch
.LBB0_5:                                # %try.cont
	addq	$48, %rsp
	popq	%rbp
	ret
.LBB0_6:                                # %lpad1
.Ltmp5:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
.Ltmp6:
	callq	__cxa_end_catch
.Ltmp7:
	jmp	.LBB0_7
.LBB0_7:                                # %invoke.cont4
	jmp	.LBB0_8
.LBB0_8:                                # %eh.resume
	movq	-16(%rbp), %rdi
	callq	_Unwind_Resume
.LBB0_9:                                # %terminate.lpad
.Ltmp8:
	movl	%edx, %ecx
	movq	%rax, %rdi
	movl	%ecx, -40(%rbp)         # 4-byte Spill
	callq	__clang_call_terminate
.Ltmp14:
	.size	_Z11landingpad1v, .Ltmp14-_Z11landingpad1v
	.cfi_endproc
.Leh_func_end0:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table0:
.Lexception0:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	"\326\200\200"          # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	78                      # Call site table length
.Lset0 = .Ltmp0-.Leh_func_begin0        # >> Call Site 1 <<
	.long	.Lset0
.Lset1 = .Ltmp1-.Ltmp0                  #   Call between .Ltmp0 and .Ltmp1
	.long	.Lset1
.Lset2 = .Ltmp2-.Leh_func_begin0        #     jumps to .Ltmp2
	.long	.Lset2
	.byte	1                       #   On action: 1
.Lset3 = .Ltmp1-.Leh_func_begin0        # >> Call Site 2 <<
	.long	.Lset3
.Lset4 = .Ltmp3-.Ltmp1                  #   Call between .Ltmp1 and .Ltmp3
	.long	.Lset4
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset5 = .Ltmp3-.Leh_func_begin0        # >> Call Site 3 <<
	.long	.Lset5
.Lset6 = .Ltmp4-.Ltmp3                  #   Call between .Ltmp3 and .Ltmp4
	.long	.Lset6
.Lset7 = .Ltmp5-.Leh_func_begin0        #     jumps to .Ltmp5
	.long	.Lset7
	.byte	0                       #   On action: cleanup
.Lset8 = .Ltmp4-.Leh_func_begin0        # >> Call Site 4 <<
	.long	.Lset8
.Lset9 = .Ltmp6-.Ltmp4                  #   Call between .Ltmp4 and .Ltmp6
	.long	.Lset9
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
.Lset10 = .Ltmp6-.Leh_func_begin0       # >> Call Site 5 <<
	.long	.Lset10
.Lset11 = .Ltmp7-.Ltmp6                 #   Call between .Ltmp6 and .Ltmp7
	.long	.Lset11
.Lset12 = .Ltmp8-.Leh_func_begin0       #     jumps to .Ltmp8
	.long	.Lset12
	.byte	1                       #   On action: 1
.Lset13 = .Ltmp7-.Leh_func_begin0       # >> Call Site 6 <<
	.long	.Lset13
.Lset14 = .Leh_func_end0-.Ltmp7         #   Call between .Ltmp7 and .Leh_func_end0
	.long	.Lset14
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.align	4

	.section	.text.__clang_call_terminate,"axG",@progbits,__clang_call_terminate,comdat
	.hidden	__clang_call_terminate
	.weak	__clang_call_terminate
	.align	16, 0x90
	.type	__clang_call_terminate,@function
__clang_call_terminate:                 # @__clang_call_terminate
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$16, %rsp
	callq	__cxa_begin_catch
	movq	%rax, -8(%rbp)          # 8-byte Spill
	callq	_ZSt9terminatev
.Ltmp15:
	.size	__clang_call_terminate, .Ltmp15-__clang_call_terminate

	.text
	.globl	main
	.align	16, 0x90
	.type	main,@function
main:                                   # @main
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp18:
	.cfi_def_cfa_offset 16
.Ltmp19:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp20:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$0, -4(%rbp)
	movl	$0, -8(%rbp)
.LBB2_1:                                # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$100, -8(%rbp)
	jge	.LBB2_4
# BB#2:                                 # %for.body
                                        #   in Loop: Header=BB2_1 Depth=1
	callq	_Z11landingpad1v
# BB#3:                                 # %for.inc
                                        #   in Loop: Header=BB2_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB2_1
.LBB2_4:                                # %for.end
	movl	$0, %eax
	addq	$16, %rsp
	popq	%rbp
	ret
.Ltmp21:
	.size	main, .Ltmp21-main
	.cfi_endproc

	.type	.L.str,@object          # @.str
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str:
	.asciz	"I'm trying to access an array I haven't allocated to: %d\n"
	.size	.L.str, 58

	.type	.L.str1,@object         # @.str1
.L.str1:
	.asciz	"Oops!\n"
	.size	.L.str1, 7


	.ident	"clang version 3.4 (tags/RELEASE_34/final)"
	.section	".note.GNU-stack","",@progbits
